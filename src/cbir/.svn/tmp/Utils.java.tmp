package cbir;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import cbir.image.DescriptorType;

public class Utils {
	
	public static void printToFile(String filename, String message){
		File file = new File(filename);
		FileWriter out;
		try {
			out = new FileWriter(file, true);
			out.write(message);
			out.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	/**
	 * calculates the scalar product of a and b
	 * @param a
	 * @param b
	 * @return scalar product
	 */
	public static double scalarProduct(double [] a, double [] b){
		double result = 0;
		for(int i = 0; i<a.length;i++)
			result += a[i]*b[i];
		return result;
	}
	
	/**
	 * calculates the scalar product of a and b
	 * @param a
	 * @param b
	 * @param weights
	 * @return scalar product
	 */
	public static double scalarProduct(double [] a, double [] b, double [] weights){
		double result = 0;
		for(int i = 0; i<a.length;i++)
			result += weights[i]*a[i]*b[i];
		return result;
	}
	
	
	/**
	 * calculates the euclidean norm of a vector
	 * @param a
	 * @return euclidean norm
	 */
	public static double norm(double [] a){
		double result = 0;
		for(int i = 0; i<a.length;i++)
			result += Math.pow(a[i],2);
		result = Math.sqrt(result);
		return result;
	}
	
	/**
	 * calculates the euclidean norm of a vector
	 * @param a
	 * @param weights
	 * @return euclidean norm
	 */
	public static double norm(double [] a,double [] weights){
		double result = 0;
		for(int i = 0; i<a.length;i++)
			result += weights[i]*Math.pow(a[i],2);
		result = Math.sqrt(result);
		return result;
	}
	
	
	public static double LogBaseX(double x, double base)
    {
       return Math.log(x) / Math.log(base);
    }
	
	public static String getSuffix(DescriptorType type){
		String result = null;
		switch(type){
			default:
				result = ".gist.histo.gz";
				break;	
		}
		return result;
	}
	
	public static double[] doubleFromDouble(List<Double> values){
		double [] result = new double[values.size()];
		for(int i = 0; i<values.size(); i++)
			result[i] = values.get(i);
		return result;
	}
	
	public static double[] concat(double[] merged, double[] is) {
		  double result[] = new double[merged.length+is.length];
		  result = Arrays.copyOf(merged, merged.length + is.length);
		  System.arraycopy(is, 0, result, merged.length, is.length);
		  return result;
	}
	
	public static double[] normalize(double[] histogram, double histoMax){
		double [] result = Arrays.copyOf(histogram, histogram.length);
		double factor = 1.d/histoMax;
		for(int i = 0; i<histogram.length; i++)
			result[i] *= factor;
		return result;
	}
	
	public static void main(String[] args){
		double[] arr = {1,2,3,1,4};
		System.out.println(Arrays.toString(concat(new double[1],arr)));
	}
}
